"""
oompy -- a python package to estimate Observable Operator Models

"""
from setuptools import setup
import os
import subprocess

##########################
VERSION = "0.1.0"
ISRELEASED = False
__version__ = VERSION
##########################

################################################################################
# Writing version control information to the module
################################################################################

def git_version():
    # Return the git revision as a string
    # copied from numpy setup.py
    def _minimal_ext_cmd(cmd):
        # construct minimal environment
        env = {}
        for k in ['SYSTEMROOT', 'PATH']:
            v = os.environ.get(k)
            if v is not None:
                env[k] = v
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, env=env).communicate()[0]
        return out

    try:
        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])
        GIT_REVISION = out.strip().decode('ascii')
    except OSError:
        GIT_REVISION = 'Unknown'

    return GIT_REVISION


def write_version_py(filename='openpathsampling/version.py'):
    cnt = """
# This file is automatically generated by setup.py
short_version = '%(version)s'
version = '%(version)s'
full_version = '%(full_version)s'
git_revision = '%(git_revision)s'
release = %(isrelease)s

if not release:
    version = full_version
"""
    # Adding the git rev number needs to be done inside write_version_py(),
    # otherwise the import of numpy.version messes up the build under Python 3.
    FULLVERSION = VERSION
    if os.path.exists('.git'):
        GIT_REVISION = git_version()
    else:
        GIT_REVISION = 'Unknown'

    if not ISRELEASED:
        FULLVERSION += '.dev-' + GIT_REVISION[:7]

    a = open(filename, 'w')
    try:
        a.write(cnt % {'version': VERSION,
                       'full_version': FULLVERSION,
                       'git_revision': GIT_REVISION,
                       'isrelease': str(ISRELEASED)})
    finally:
        a.close()

################################################################################
# Installation
################################################################################

write_version_py()
# CMBAR = Extension('_pymbar',
#                   sources = ["pymbar/_pymbar.c"],
#                   extra_compile_args=["-std=c99","-O2","-shared","-msse2","-msse3"],
#                   include_dirs = [numpy.get_include(),numpy.get_include()+"/numpy/"]
#                   )

def buildKeywordDictionary():
    from distutils.core import Extension
    setupKeywords = {}
    setupKeywords["name"]              = "oompy"
    setupKeywords["version"]           = "0.0.1-alpha"
    setupKeywords["author"]            = "Jan-Hendrik Prinz, Hao Wu"
    setupKeywords["author_email"]      = "jan.prinz@choderalab.org, hao@"
    setupKeywords["license"]           = "LGPL 2.1 or later"
    setupKeywords["url"]               = "http://www.openpathsampling.org"
    setupKeywords["download_url"]      = "http://github.com/choderalab/openpathsampling"
    setupKeywords["packages"]          = ['openpathsampling',
                                          'openpathsampling.storage',
                                          'openpathsampling.toy_dynamics',
                                          'openpathsampling.tests',
                                          'openpathsampling.analysis',
                                          'openpathsampling.features',
                                          'openpathsampling.netcdfplus'
                                          ]
    setupKeywords["package_dir"]       = {
        'openpathsampling' : 'openpathsampling',
        'openpathsampling.storage' : 'openpathsampling/storage',
        'openpathsampling.toy_dynamics' : 'openpathsampling/toy_dynamics',
        'openpathsampling.tests' : 'openpathsampling/tests',
        'openpathsampling.features' : 'openpathsampling/features',
        'openpathsampling.netcdfplus' : 'openpathsampling/netcdfplus'
    }
    #setupKeywords["py_modules"]        = ["pymbar", "timeseries", "testsystems", "confidenceintervals"]
    setupKeywords["data_files"]        = []
    setupKeywords["ext_modules"]       = []
    # setupKeywords["test_suite"]        = "tests" # requires we migrate to setuptools
    setupKeywords["platforms"]         = ["Linux", "Mac OS X", "Windows"]
    setupKeywords["description"]       = "Python implementation of the transition interface sampling methos."
    setupKeywords["requires"]          = ["numpy", "nose"]
    setupKeywords["long_description"]  = """
    OpenPathSampling (http://github.com/choderalab/openpathsampling) is a python library to do transition interface sampling.
    """
    outputString=""
    firstTab     = 40
    secondTab    = 60
    for key in sorted( setupKeywords.iterkeys() ):
         value         = setupKeywords[key]
         outputString += key.rjust(firstTab) + str( value ).rjust(secondTab) + "\n"
    
    print("%s" % outputString)

    #get_config_var(None)  # this line is necessary to fix the imports Mac OS X
    return setupKeywords
    

def main():
    setupKeywords = buildKeywordDictionary()
    setup(**setupKeywords)

if __name__ == '__main__':
    main()




